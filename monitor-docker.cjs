#!/usr/bin/env node

// Script pour afficher monitor-compact.js dans les logs Docker
// avec un formatage adapt√© aux conteneurs

// Import des fonctions depuis monitor-compact.js (qui utilise ES modules)
// On va recr√©er les fonctions n√©cessaires ici pour √©viter les probl√®mes d'import
const Database = require('better-sqlite3');
const path = require('path');

const dbPath = path.join(__dirname, 'queue.db');

// Fonction pour collecter les statistiques
function collectStats() {
  try {
    const db = new Database(dbPath, { readonly: true });
    
    const stats = db.prepare(`
      SELECT 
        (SELECT COUNT(*) FROM users) as totalUsers,
        (SELECT COUNT(*) FROM tags) as totalTags,
        (SELECT COUNT(*) FROM posts) as totalPosts,
        (SELECT COUNT(*) FROM notifications) as totalNotifications,
        (SELECT COUNT(*) FROM jobs WHERE status = 'pending') as pendingJobs,
        (SELECT COUNT(*) FROM jobs WHERE status = 'processing') as processingJobs,
        (SELECT COUNT(*) FROM jobs WHERE status = 'done') as completedJobs,
        (SELECT COUNT(*) FROM jobs WHERE status = 'error') as errorJobs,
        (SELECT COUNT(*) FROM jobs WHERE status = 'ignored') as skippedJobs,
        (SELECT COUNT(*) FROM jobs WHERE status = 'published') as publishedJobs,
        (SELECT COUNT(DISTINCT post_uri) FROM tags) as taggedPosts
    `).get();
    
    db.close();
    return stats || {};
  } catch (error) {
    return {
      totalUsers: 0, totalTags: 0, totalPosts: 0, totalNotifications: 0,
      pendingJobs: 0, processingJobs: 0, completedJobs: 0, errorJobs: 0,
      skippedJobs: 0, publishedJobs: 0, taggedPosts: 0
    };
  }
}

// Fonction pour r√©cup√©rer les jobs r√©cents
function getRecentJobs(limit = 5) {
  try {
    const db = new Database(dbPath, { readonly: true });
    const jobs = db.prepare(`
      SELECT type, status, created_at, processed_at
      FROM jobs 
      ORDER BY created_at DESC 
      LIMIT ?
    `).all(limit);
    db.close();
    return jobs || [];
  } catch (error) {
    return [];
  }
}

// Fonction pour r√©cup√©rer l'activit√© r√©cente
function getRecentActivity(limit = 5) {
  try {
    const db = new Database(dbPath, { readonly: true });
    
    // Simuler l'activit√© r√©cente bas√©e sur les jobs et notifications
    const activities = [];
    
    // Jobs r√©cents
    const recentJobs = db.prepare(`
      SELECT 'job' as type, type as job_type, status, created_at
      FROM jobs 
      ORDER BY created_at DESC 
      LIMIT ?
    `).all(limit);
    
    recentJobs.forEach(job => {
      activities.push({
        type: 'job',
        description: `Job ${job.job_type} - ${job.status}`,
        created_at: job.created_at
      });
    });
    
    // Notifications r√©centes
    const recentNotifs = db.prepare(`
      SELECT 'notification' as type, created_at
      FROM notifications 
      ORDER BY created_at DESC 
      LIMIT ?
    `).all(limit);
    
    recentNotifs.forEach(notif => {
      activities.push({
        type: 'notification',
        description: 'Nouvelle notification',
        created_at: notif.created_at
      });
    });
    
    db.close();
    
    // Trier par date et limiter
    return activities
      .sort((a, b) => new Date(b.created_at) - new Date(a.created_at))
      .slice(0, limit);
  } catch (error) {
    return [];
  }
}

// Fonction pour afficher les stats de mani√®re compacte pour Docker
function displayDockerLogs() {
  try {
    const stats = collectStats();
    const recentJobs = getRecentJobs(5);
    const recentActivity = getRecentActivity(5);
    
    // Header avec timestamp
    console.log('\n' + '='.repeat(60));
    console.log(`[TAGKY MONITOR] ${new Date().toISOString()}`);
    console.log('='.repeat(60));
    
    // Stats principales
    console.log(`üìä STATS: Users: ${stats.totalUsers} | Tags: ${stats.totalTags} | Posts: ${stats.totalPosts}`);
    console.log(`üìù NOTIFICATIONS: ${stats.totalNotifications}`);
    console.log(`‚öôÔ∏è  JOBS: Pending: ${stats.pendingJobs} | Processing: ${stats.processingJobs} | Done: ${stats.completedJobs}`);
    console.log(`‚ùå ERRORS: ${stats.errorJobs} | ‚è≠Ô∏è  SKIPPED: ${stats.skippedJobs} | ‚úÖ PUBLISHED: ${stats.publishedJobs}`);
    console.log(`üè∑Ô∏è  TAGGED POSTS: ${stats.taggedPosts}`);
    
    // Activit√© r√©cente
    if (recentActivity.length > 0) {
      console.log('\nüìã RECENT ACTIVITY:');
      recentActivity.forEach(activity => {
        const icon = getActivityIcon(activity.type);
        const time = new Date(activity.created_at).toLocaleTimeString();
        console.log(`  ${icon} [${time}] ${activity.description}`);
      });
    }
    
    // Jobs r√©cents
    if (recentJobs.length > 0) {
      console.log('\nüîÑ RECENT JOBS:');
      recentJobs.forEach(job => {
        const statusIcon = getJobStatusIcon(job.status);
        const time = new Date(job.created_at).toLocaleTimeString();
        console.log(`  ${statusIcon} [${time}] ${job.type} - ${job.status}`);
      });
    }
    
    console.log('='.repeat(60));
    
  } catch (error) {
    console.error(`[TAGKY MONITOR ERROR] ${error.message}`);
  }
}

// Ic√¥nes pour les types d'activit√©
function getActivityIcon(type) {
  const icons = {
    'job': '‚öôÔ∏è',
    'notification': 'üì¢',
    'publish': 'üì§',
    'follow': 'üë•',
    'unfollow': 'üë§',
    'tag': 'üè∑Ô∏è'
  };
  return icons[type] || 'üìã';
}

// Ic√¥nes pour les statuts de jobs
function getJobStatusIcon(status) {
  const icons = {
    'pending': '‚è≥',
    'processing': '‚öôÔ∏è',
    'completed': '‚úÖ',
    'error': '‚ùå',
    'skipped': '‚è≠Ô∏è',
    'published': 'üì§'
  };
  return icons[status] || '‚ùì';
}

// Fonction principale
function main() {
  console.log('[TAGKY MONITOR] D√©marrage du moniteur Docker...');
  
  // Affichage initial
  displayDockerLogs();
  
  // Mise √† jour toutes les 10 secondes (plus adapt√© pour Docker)
  const interval = setInterval(displayDockerLogs, 10000);
  
  // Gestion de l'arr√™t propre
  process.on('SIGINT', () => {
    console.log('\n[TAGKY MONITOR] Arr√™t du moniteur...');
    clearInterval(interval);
    process.exit(0);
  });
  
  process.on('SIGTERM', () => {
    console.log('\n[TAGKY MONITOR] Arr√™t du moniteur...');
    clearInterval(interval);
    process.exit(0);
  });
}

// D√©marrage si ex√©cut√© directement
if (require.main === module) {
  main();
}

module.exports = { displayDockerLogs, main };